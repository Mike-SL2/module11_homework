//Модуль 11. Функции и объекты - домашнее задание - Слугин Михаил
//----------------------------------------------------------------------------------------------------------------
//Задание 1
//В прошлом модуле в юните «Циклы» вы выполняли следующее задание:
//Дан массив. Нужно вывести в консоль количество чётных и нечётных элементов в массиве. 
//Если в массиве есть нулевой элемент, то он учитывается и выводится отдельно. 
//При выполнении задания необходимо учесть, что массив может содержать не только числа, но и знаки, например null и так далее.
//На этот раз оформите решение в виде функции: постарайтесь дать этой функции корректное название, 
//вызовите функцию, проанализируйте синтаксис.
//------------------------------------------------------------------------------------------------------------
function array_parsing(rum)							//function 'array_parsing' declaration - map structure as return
			   {let rum_len=rum.length;				//'rum_length' variable declare - array 'rum' length			   
			    let zeroes=0; let odds=0; let evens=0; let r=0;     //operation variables declaration
	      		    arr_odds=[];arr_evens=[]; let nules=0;	
	      		    const pre_ev=' чётных';const pre_od=' нечётных';	//output labels prefixes/postfixes declaration
	      		    const po_elem=' элементов';const pre_mas='массив';	      		    			   
/*parsing procedure begins*/for (i=0;i<rum_len;i++){if (typeof rum[i]=='number') //if input is a number
						   {r=rum[i];if (r) {if (r===Math.trunc(r)) //check input whether it is ((not equal to zero) and (integer)) 
		 				   	{if (r%2) {arr_odds.push(r);odds++} //input is an odd number - 'odds' counter incrementing
		 				   			else {arr_evens.push(r);evens++;}}} //input is an even number - 'evens' counter incrementing
	  					    	     else zeroes++;}		    //input is equal to zero - zeroes counter incrementing
						    else {if (rum[i]==null){nules++;}}} //if input is not a number and it is equal to 'null' - 'nules' counter incrementing
//operation results output to returnMap array 	
let returnMap=new Map([['исследуемый '+pre_mas,rum],['нулей',zeroes],['нулевых(null)'+po_elem,nules],[pre_ev+po_elem,evens],
		      [pre_mas+pre_ev+po_elem,arr_evens],[pre_od+po_elem,odds],[pre_mas+pre_od+po_elem,arr_odds]]); 	
//function 'array_parsing' return/output				    			     
return returnMap;}

function form_outprint(array_pair)						//function 'form_outprint' declaration
				  {let clnSymb=': ';				//semicolon symbol for formatted console output
				   let spc8='        ';				//tabulation sign - 8 white spaces
				   if (Array.isArray(array_pair[1])) {console.log(spc8+array_pair[0]+clnSymb); //array output procedure
				   				      array_pair[1].map(function(arr_item){console.log(spc8+spc8+arr_item);})}
				   else console.log(array_pair[0]+clnSymb+array_pair[1]); //non array output procedure
				   }
/*---------------------------  MAIN PROGRAM BEGINS ---------------------------*/
let array_1 = [1,2,0,3,'1',null,'2','3',true,0,false,'abc123','0',52.5,-1,-10,-1.5,false,1.5,0.5,-0.5,null,50,0,101]
let anRes=array_parsing(array_1); 		//function 'array_parsing' call - anres Map structure as function return
for (let out_1 of anRes){form_outprint(out_1);} //console formatted output cyclic calling
//------------------------------------------------------------------------------------------------------------------
function countEvenOddZeroElements(arr) {

    const numbersArray = arr.filter(element => typeof element === 'number' && !isNaN(element));
    const evenCount = numbersArray.filter(element => element !== 0 && element % 2 === 0).length;
    const oddCount = numbersArray.filter(element => element % 2 !== 0).length;
    const zeroCount = numbersArray.filter(element => element === 0).length;

    console.log("Количество чётных элементов:", evenCount);
    console.log("Количество нечётных элементов:", oddCount);
    console.log("Количество нулевых элементов:", zeroCount);
}
let array_1 = [1,2,0,3,'1',null,'2','3',true,0,false,'abc123','0',52.5,-1,-10,-1.5,false,1.5,0.5,-0.5,null,50,0,101]
console.log(array_1);
countEvenOddZeroElements(array_1);



//===========================================================================================================

//Задание 2
//Напишите функцию, которая принимает на входе любое число (но не больше 1 000), определяет, 
//является ли оно простым, и выводит, простое число или нет. Если введено больше 1 000, 
//то выводится сообщение, что данные неверны. Обратите внимание на числа 0 и 1.
//Здесь вам пригодятся знания из предыдущего модуля — циклы и условные операторы.
//------------------------------------------------------------------------------------------
//------------------ *** ---------------------v.1
/*function findDiv (x,MaxCount) {let outX=true;if (x%2) {for (i=3;i<MaxCount;i++){if (!(x%i)) {outX=false;break}}}
			     		     else outX=false;
			       return outX;}
			       
function isSimple(num){if (num<12) {return findDiv (num,num)} else {return findDiv (num,Math.trunc(num/3));}		      		 
		      }
				      		  
function checkNumber(Q){let mes='';let nir='не ';let digit='число';
			if (isNaN(Q)) {return 'введено '+nir+digit;}
			         else {let simp='простое';let nest='составное'; 
					 if (Q>1000) {mes='данные неверны'}
						 	else
						 {mes=Q+' ';
						  switch (Q) {case 0:{}
							      case 1:mes=mes+nir+simp+', '+nir+nest+' '+digit;break;
							      case 2:mes=mes+simp+' '+digit;break;
							      default: if (Q<0) {mes=mes+digit+' меньше нуля'} else
							     		{if (isSimple(Q)) {mes=mes+simp+' '+digit} 
									 else mes=mes+'       '+nest+' '+digit;}
							     }
						}
			 return mes;}
		       }
let s='';
do {
let nr=prompt('Проверка простое число. Выход - 0000');if (nr=='0000') break;
nr++; nr--;alert(checkNumber(nr));} while (1);*/
//------------------ *** ---------------------v.2.1
const errorMessage='Данные неверны. Пожалуйста, введите число от 2 до 1000.';
const isSimple2 = (n) => {if (n<2 || n>1000) {return errorMessage};
			  const nStr=n+' - '; const simplStr=nStr+'простое число.';
			  let i=2; 
			  if (n==i) return simplStr;			  
			  while(i<n){if (n%i) i++; else {return nStr+'не является простым числом.';}}
	      return simplStr;};

while(1){let x=prompt('Method - 2. число от 2 до 1000. 0 - stop');
if (isNaN(x)) alert(errorMessage); else {x++;x--; if (x) alert(isSimple2(x)); else break;}};
//------------------ *** ---------------------v.2.2
const errorMessage='Данные неверны. Пожалуйста, введите число от 2 до 1000.';
const isSimple2 = (n) => {if (n<2 || n>1000) {return errorMessage};
			  const nStr=n+' - '; const simplStr=nStr+'простое число.';
			  let i=2;  let max=n;if (n>9) max=Math.trunc(n/3);
			  if (n==i) return simplStr;			  
			  while(i<max){if (n%i) i++; else {return nStr+'не является простым числом.';}}
	      return simplStr;};

while(1){let x=prompt('Method - 2. число от 2 до 1000. 0 - stop');
if (isNaN(x)) alert(errorMessage); else {x++;x--; if (x) alert(isSimple2(x)); else break;}};

//===========================================================================================================

//Задание 3
//Напишите функцию, которая принимает число как аргумент и возвращает функцию, которая 
//также принимает число как аргумент и возвращает сумму этих двух чисел. Выведите в консоль результат.
//---------------------------------------------------------------------------------------------

function func1 (x1)			    //func1 - функция с аргументом x1
{return function func2 (x2){return x1+x2}}  //func2 - функция с аргументом x2 и доступом к переменной x1 из ф-ции func1

let jMax=2;			//Количество повторов программы
let stopSign='0000';		//Признак конца задания данных/останов программы
				//Подсказки пользователю
let mes1='Сумма: ';  	let postfix=' число. Стоп - '+stopSign; 
			let prefix=['z','первое','второе'];
let a=[]; //массив входных данных
let j=0;  //счётчик повторов программы
				//Диагностические сообщения
let TermMes='НОшвЗадДан'; 	//Нет ошибок в задании данных - нормальное завершение программы
let stopTermMes='ПрзКонЗадДан'; //Получен признак конца задания данных - программа прервана пользователем
let errTermMes='ОшвЗадДан';	//Ошибка в задании данных - аварийное завершение программы

haltPrg0:while (j<jMax){j++;

	for (i=1;i<3;i++) {a[i]=prompt(j+'. '+prefix[i]+postfix);		//ввод данных
		   if (a[i]==stopSign) {TermMes=stopTermMes;break haltPrg0;}	//проверка-1
		   a[i]++;a[i]--;						//преобразование данных
		   if (isNaN(a[i])) {TermMes=errTermMes;break haltPrg0;}}	//проверка-2

		   const y1=func1(a[1]); //y1 - функция func2 c переданным значением переменной a1 через функцию func1
		   const y2=y1(a[2]);    //y2 - возвращённое функцией func2 значение = сумме a1 и аргумента func2 - a2

		   console.log(mes1+y2); //вывод результата
		   alert(mes1+y2);}		   
console.log(TermMes);  			 //вывод диагностики

//===========================================================================================================

//Задание 4
//Напишите функцию, которая принимает два числа. Каждую секунду необходимо выводить числа в интервале от 
//первого до второго принятого числа. Используйте setInterval.
//Например, пользователь ввёл числа 5 и 15. Каждую секунду в консоль должно печататься число, начиная с 
//5 и заканчивая 15 (всего 11 чисел: 5 6 7 8 9 10 11 12 13 14 15).
//-----------------------------------------------------------------------------------------
function alm(){const mes='ОшЗадДан';console.log(mes);alert(mes);};    //сигнал ошибка задания данных

// ---------------- 1-й способ ---------------
function printNumbersInRange1(min, max) {
    if (isNaN(min)||isNaN(max)) {alm();return;} else {if (min>=max) {alm();return;} }
					     //далее min используется как счётчик
    const interval = setInterval(function() {console.log(min);
        				     if (min === max) {clearInterval(interval);} else {min++;}}, 1000);}

// ---------------- 2-й способ ---------------
function printNumbersInRange2(){if (isNaN(min)||isNaN(max)) {alm();return;} else {if (min>=max) {alm();return;} }
				const i0Id=setInterval((function cnt (xMin,xMax){let i=xMin;console.log('НАЧ',xMin);
			                	 function cnt(){if (i>xMax){clearInterval(i0Id);console.log('КОН',xMax);} 
			                		 	else {console.log(i);i++;}return;}
		          	return cnt;}(min,max)),1000);	}

//ввод исх. данных
let min=prompt('первое число');min++;min--;let max=prompt('второе число');max++;max--;

//селектор типа решения
let way=prompt('выберите способ решения (1-2)');
switch (way) {case '1': console.log('---------------- 1-й способ ---------------');
			printNumbersInRange1(min, max);break;
	      case '2': console.log('---------------- 2-й способ ---------------');
			printNumbersInRange2();
	      }

//===========================================================================================================

//Задание 5
//Напишите функцию, которая принимает два натуральных числа x и n и возвращает x в степени n. 
//Иначе говоря, умножает x на себя n раз и возвращает результат.
//Используйте Arrow Function синтаксис.
//Протестируйте функцию на любых значениях и выведите результат в консоль.
//-------------------------------------------------------------------------
// 1-й способ /умножает x на себя n раз и возвращает результат/
const X_power_N_1 = (X,n)=> {let R=1;while (n) {R=R*X;n--;} return R;}

// 2-й способ /умножает x на себя n раз и возвращает результат - СТРОКУ/
const X_power_N_2 = (X,n)=> {let s=X+' в степени '+n+' = ';let R=1;while (n) {R=R*X;n--;}  return s+R;}

// 3-й способ
const X_power_N_3 = (X,n) => X**n;

// 4-й способ
const X_power_N_4 = (X,n) => Math.pow(X,n);



console.log('--------- 1-й способ ---------');
console.log(X_power_N_1(3,3));console.log(X_power_N_1(9,3));console.log(X_power_N_1(10,6));console.log(X_power_N_1(2,8));

console.log('--------- 2-й способ ---------');
console.log(X_power_N_2(3,3));console.log(X_power_N_2(9,3));console.log(X_power_N_2(10,6));console.log(X_power_N_2(2,8));
	
console.log('--------- 3-й способ ---------');
console.log(X_power_N_3(3,3));console.log(X_power_N_3(9,3));console.log(X_power_N_3(10,6));console.log(X_power_N_3(2,8));

console.log('--------- 4-й способ ---------');
console.log(X_power_N_4(3,3));console.log(X_power_N_4(9,3));console.log(X_power_N_4(10,6));console.log(X_power_N_4(2,8));
